#!/usr/bin/env python3
# fix_translation_issues.py - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞ TTS

import requests
import json
import time
import re

def analyze_transcript_quality():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á transcript ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ"""
    print("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Transcript")
    print("=" * 40)
    
    transcript_file = "uploads/transcript_790afb81-cc69-4f15-b764-933aa30bcf63.json"
    
    try:
        with open(transcript_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        text = data.get('text', '')
        language = data.get('language', 'unknown')
        segments = data.get('segments', [])
        
        print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå Transcript: {transcript_file}")
        print(f"üåê ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {language}")
        print(f"üìù ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {len(text)} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        print(f"‚è±Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡πà‡∏ß‡∏ô: {len(segments)} segments")
        print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        print("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (300 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å):")
        print(f"   '{text[:300]}{'...' if len(text) > 300 else ''}'")
        print()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        issues = []
        
        if language != 'en':
            issues.append(f"‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {language})")
        
        if len(text.strip()) < 50:
            issues.append("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
        expected_words = ['bear', 'bee', 'honey', 'forest']
        found_words = [word for word in expected_words if word.lower() in text.lower()]
        missing_words = [word for word in expected_words if word not in found_words]
        
        if missing_words:
            issues.append(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {', '.join(missing_words)}")
        
        if issues:
            print("‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
            for issue in issues:
                print(f"   - {issue}")
        else:
            print("‚úÖ Transcript ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ")
        
        return text, language
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô transcript: {e}")
        return None, None

def test_translation_quality(text, source_lang="en"):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"""
    print("\nüî§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•")
    print("=" * 40)
    
    if not text:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
        return None
    
    # ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_chunks = [
        text[:200],  # 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
        text[200:400] if len(text) > 200 else "",  # ‡∏ä‡∏¥‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        text[-200:] if len(text) > 200 else ""     # 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡πâ‡∏≤‡∏¢
    ]
    
    translations = []
    
    for i, chunk in enumerate(test_chunks):
        if not chunk.strip():
            continue
        
        print(f"\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà {i+1}:")
        print(f"   ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: '{chunk[:100]}{'...' if len(chunk) > 100 else ''}'")
        
        try:
            payload = {
                "q": chunk,
                "source": source_lang,
                "target": "th"
            }
            
            response = requests.post(
                "http://localhost:5000/translate",
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                translated = result.get("translatedText", "")
                
                print(f"   ‡πÅ‡∏õ‡∏•: '{translated[:100]}{'...' if len(translated) > 100 else ''}'")
                
                # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
                quality_score = evaluate_translation_quality(chunk, translated)
                print(f"   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û: {quality_score}/10")
                
                translations.append(translated)
                
            else:
                print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    return translations

def evaluate_translation_quality(original, translated):
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•"""
    score = 10
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
    length_ratio = len(translated) / len(original) if len(original) > 0 else 0
    if length_ratio < 0.3 or length_ratio > 3.0:
        score -= 3
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢
    thai_chars = len(re.findall(r'[\u0E00-\u0E7F]', translated))
    if thai_chars < len(translated) * 0.5:  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 50% ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢
        score -= 2
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    key_mappings = {
        'bear': ['‡∏´‡∏°‡∏µ'],
        'bee': ['‡∏ú‡∏∂‡πâ‡∏á', '‡∏ú‡∏¥‡πâ‡∏á'],
        'honey': ['‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á', '‡∏ú‡∏∂‡πâ‡∏á'],
        'forest': ['‡∏õ‡πà‡∏≤', '‡πÑ‡∏ú‡πà'],
        'tree': ['‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ', '‡πÑ‡∏ú‡πà']
    }
    
    for eng_word, thai_words in key_mappings.items():
        if eng_word.lower() in original.lower():
            if not any(thai_word in translated for thai_word in thai_words):
                score -= 1
    
    return max(0, score)

def test_improved_tts(text):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    print("\nüîä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    print("=" * 40)
    
    if not text:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    test_texts = [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å",
        text[:100] if text else "",  # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß
        "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö"
    ]
    
    for i, test_text in enumerate(test_texts):
        if not test_text.strip():
            continue
        
        print(f"\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS ‡∏ó‡∏µ‡πà {i+1}:")
        print(f"   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '{test_text[:50]}{'...' if len(test_text) > 50 else ''}'")
        
        try:
            payload = {
                "text": test_text,
                "language": "th",
                "use_edge_tts": True
            }
            
            start_time = time.time()
            response = requests.post(
                "http://localhost:5002/synthesize",
                json=payload,
                timeout=30
            )
            processing_time = time.time() - start_time
            
            if response.status_code == 200:
                result = response.json()
                audio_file = result.get('audio_file')
                file_size = result.get('file_size', 0)
                voice_used = result.get('voice_used', 'unknown')
                
                print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
                print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤: {processing_time:.2f}s")
                print(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î: {file_size} bytes")
                print(f"   - ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: {voice_used}")
                
                # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                bytes_per_char = file_size / len(test_text) if len(test_text) > 0 else 0
                print(f"   - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô: {bytes_per_char:.1f} bytes/char")
                
                if processing_time < 2:
                    print("   ‚ö° ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡πá‡∏ß")
                elif processing_time > 10:
                    print("   üêå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πâ‡∏≤")
                
                if bytes_per_char > 1000:
                    print("   üéµ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                else:
                    print("   ‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                
            else:
                print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {response.status_code}")
                print(f"   Response: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üîß ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡∏∞ TTS")
    print("üìÖ " + time.strftime("%Y-%m-%d %H:%M:%S"))
    print("=" * 60)
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå transcript
    text, language = analyze_transcript_quality()
    
    if text:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
        translations = test_translation_quality(text, language)
        
        if translations:
            # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö TTS
            best_translation = max(translations, key=len)  # ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            test_improved_tts(best_translation)
    
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
    print("   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û Speech-to-Text")
    print("   2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤")
    print("   3. ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô TTS ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß")
    print()
    print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    print("   - ‡∏´‡∏≤‡∏Å Transcript ‡∏ú‡∏¥‡∏î: ‡∏õ‡∏£‡∏±‡∏ö Whisper model")
    print("   - ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ú‡∏¥‡∏î: ‡∏õ‡∏£‡∏±‡∏ö LibreTranslate ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ service ‡∏≠‡∏∑‡πà‡∏ô")
    print("   - ‡∏´‡∏≤‡∏Å TTS ‡πÄ‡∏£‡πá‡∏ß/‡∏ä‡πâ‡∏≤: ‡∏õ‡∏£‡∏±‡∏ö rate ‡πÉ‡∏ô SSML")
    print("   - ‡∏´‡∏≤‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏õ‡∏•‡∏Å: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö language detection")

if __name__ == "__main__":
    main()
