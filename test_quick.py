#!/usr/bin/env python3
# test_translation_now.py - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß

import requests
import time
import json

def test_libretranslate():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö LibreTranslate service"""
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LibreTranslate...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        print("   üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        response = requests.get("http://localhost:5000/languages", timeout=10)
        
        if response.status_code == 200:
            languages = response.json()
            print(f"   ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö {len(languages)} ‡∏†‡∏≤‡∏©‡∏≤")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            lang_codes = [lang['code'] for lang in languages]
            print(f"   üìù ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {', '.join(lang_codes[:10])}...")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
            print("   üî§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•...")
            translate_data = {
                "q": "Hello, how are you?",
                "source": "en", 
                "target": "th"
            }
            
            translate_response = requests.post(
                "http://localhost:5000/translate",
                json=translate_data,
                timeout=15
            )
            
            if translate_response.status_code == 200:
                result = translate_response.json()
                translated = result.get("translatedText", "")
                print(f"   ‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: 'Hello, how are you?' ‚Üí '{translated}'")
                return True
            else:
                print(f"   ‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {translate_response.status_code}")
                return False
                
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.ConnectRefused:
        print("   ‚ùå LibreTranslate ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        return False
    except requests.exceptions.Timeout:
        print("   ‚è∞ LibreTranslate ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤ (‡∏≠‡∏≤‡∏à‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î models)")
        return False
    except Exception as e:
        print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def test_backend_api():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API"""
    print("\nüñ•Ô∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö health check
        response = requests.get("http://localhost:8000/health", timeout=10)
        
        if response.status_code == 200:
            health_data = response.json()
            print("   ‚úÖ Backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ services
            services = health_data.get("services", {})
            for service, status in services.items():
                status_icon = "‚úÖ" if "available" in status else "‚ùå"
                print(f"      {status_icon} {service}: {status}")
            
            return True
        else:
            print(f"   ‚ùå Backend ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Backend: {e}")
        return False

def test_frontend():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend"""
    print("\nüåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Frontend...")
    
    try:
        response = requests.get("http://localhost:3000", timeout=10)
        
        if response.status_code == 200:
            print("   ‚úÖ Frontend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            print("   üåê ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://localhost:3000")
            return True
        else:
            print(f"   ‚ùå Frontend ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Frontend: {e}")
        return False

def test_quick_video_translation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß"""
    print("\nüé¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
    
    try:
        # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        payload = {
            "youtube_url": "https://youtu.be/jNQXAC9IVRw",  # Me at the zoo - 19 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            "target_language": "th"
        }
        
        response = requests.post(
            "http://localhost:8000/process-video/",
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            task_id = result.get("task_id")
            print(f"   ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß - Task ID: {task_id}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
            time.sleep(2)
            status_response = requests.get(f"http://localhost:8000/status/{task_id}")
            
            if status_response.status_code == 200:
                status_data = status_response.json()
                status = status_data.get("status", "unknown")
                message = status_data.get("message", "")
                print(f"   üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {status} - {message}")
                return True
            else:
                print("   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ")
                return False
                
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡πÑ‡∏î‡πâ: HTTP {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö YouTube Video Translator ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß")
    print("=" * 60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å services
    backend_ok = test_backend_api()
    frontend_ok = test_frontend()
    libretranslate_ok = test_libretranslate()
    
    print("\n" + "=" * 60)
    print("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print(f"   Backend API:     {'‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥' if backend_ok else '‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}")
    print(f"   Frontend:        {'‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥' if frontend_ok else '‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}")
    print(f"   LibreTranslate:  {'‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥' if libretranslate_ok else '‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'}")
    
    if backend_ok and frontend_ok and libretranslate_ok:
        print("\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏™‡πà‡∏ß‡∏ô!")
        print("üåê ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://localhost:3000")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
        test_quick_video_translation()
        
    elif backend_ok and frontend_ok:
        print("\n‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÅ‡∏ï‡πà LibreTranslate ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        print("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏£‡∏±‡∏ô Fix-LibreTranslate.bat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
        
    else:
        print("\n‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:")
        if not backend_ok:
            print("   - Backend API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        if not frontend_ok:
            print("   - Frontend ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        if not libretranslate_ok:
            print("   - LibreTranslate ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        print("\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏£‡∏±‡∏ô Fix-And-Start.bat ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

if __name__ == "__main__":
    main()
