#!/usr/bin/env python3
# test_speech_translation_fix.py - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞ TTS

import requests
import json
import time
import os

def test_whisper_language_detection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏ô Whisper"""
    print("üé§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Whisper Language Detection")
    print("=" * 70)
    
    # Test cases ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    test_cases = [
        {
            "language": "en",
            "description": "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
            "test_text": "Hello, this is a test of English speech recognition."
        },
        {
            "language": "th", 
            "description": "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
            "test_text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏π‡πâ‡∏à‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"
        }
    ]
    
    for test_case in test_cases:
        lang = test_case["language"]
        desc = test_case["description"]
        text = test_case["test_text"]
        
        print(f"\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {desc} (language={lang})")
        print(f"   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '{text}'")
        
        try:
            # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Whisper service
            whisper_payload = {
                "language": lang,
                "task": "transcribe"
            }
            
            print(f"   üì§ ‡∏™‡πà‡∏á request: language='{lang}', task='transcribe'")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL endpoint
            whisper_url = "http://localhost:5001/transcribe"
            try:
                response = requests.get("http://localhost:5001/health", timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ Whisper service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                else:
                    print(f"   ‚ö†Ô∏è Whisper service ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏õ‡∏Å‡∏ï‡∏¥: HTTP {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå Whisper service ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {e}")
                print(f"   üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° Whisper service ‡∏Å‡πà‡∏≠‡∏ô")
                continue
                
        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

def test_tts_speed_improvement():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß TTS"""
    print("\nüîä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ TTS ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß")
    print("=" * 50)
    
    test_sentences = [
        {
            "text": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥",
            "expected_duration": "‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÑ‡∏°‡πà‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)"
        },
        {
            "text": "‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
            "expected_duration": "‡∏ä‡πâ‡∏≤‡∏•‡∏á (rate=0.85)"
        },
        {
            "text": "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Text-to-Speech ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏û‡∏π‡∏î‡∏ä‡πâ‡∏≤‡∏•‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô",
            "expected_duration": "‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å (slow=True)"
        }
    ]
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö TTS service
        tts_response = requests.get("http://localhost:5002/health", timeout=5)
        if tts_response.status_code != 200:
            print("‚ùå TTS service ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° TTS service ‡∏Å‡πà‡∏≠‡∏ô")
            return
            
        print("‚úÖ TTS service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        for i, test in enumerate(test_sentences, 1):
            text = test["text"]
            expected = test["expected_duration"]
            
            print(f"\nüìù ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà {i}:")
            print(f"   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: '{text[:50]}{'...' if len(text) > 50 else ''}'")
            print(f"   ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {expected}")
            
            try:
                payload = {
                    "text": text,
                    "language": "th", 
                    "use_edge_tts": True
                }
                
                start_time = time.time()
                response = requests.post(
                    "http://localhost:5002/synthesize",
                    json=payload,
                    timeout=30
                )
                end_time = time.time()
                
                if response.status_code == 200:
                    result = response.json()
                    file_size = result.get('file_size', 0)
                    voice_used = result.get('voice_used', 'unknown')
                    processing_time = end_time - start_time
                    
                    print(f"   ‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:")
                    print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {processing_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                    print(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size:,} bytes") 
                    print(f"   - ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {voice_used}")
                    
                    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                    chars_per_byte = len(text) / file_size if file_size > 0 else 0
                    print(f"   - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô: {chars_per_byte:.4f} chars/byte")
                    
                    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
                    if processing_time > 10:
                        print(f"   ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô ({processing_time:.1f}s)")
                    if file_size < len(text) * 80:  # ‡∏´‡∏¢‡∏≤‡∏ö‡πÜ
                        print(f"   ‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏≤‡∏à‡∏™‡∏±‡πâ‡∏ô/‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                    else:
                        print(f"   ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                        
                else:
                    print(f"   ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {response.status_code}")
                    print(f"   Response: {response.text}")
                    
            except Exception as e:
                print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ TTS service: {e}")

def test_full_pipeline_integration():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö pipeline ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"""
    print("\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Integration ‡∏Ç‡∏≠‡∏á Pipeline ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß")
    print("=" * 60)
    
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Backend API
        backend_response = requests.get("http://localhost:8000/health", timeout=5)
        if backend_response.status_code != 200:
            print("‚ùå Backend API ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° Backend service ‡∏Å‡πà‡∏≠‡∏ô")
            return
            
        print("‚úÖ Backend API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á demo task ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö 
        demo_payload = {
            "youtube_url": "https://www.youtube.com/watch?v=dQw4w9WgXcQ",  # Rick Roll
            "source_language": "en",
            "target_language": "th"
        }
        
        print("\nüì§ ‡∏™‡πà‡∏á request ‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
        print(f"   URL: {demo_payload['youtube_url']}")
        print(f"   ‡∏à‡∏≤‡∏Å: {demo_payload['source_language']} ‚Üí ‡πÄ‡∏õ‡πá‡∏ô: {demo_payload['target_language']}")
        
        # ‡∏™‡πà‡∏á request (‡πÅ‡∏Ñ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á task)
        response = requests.post(
            "http://localhost:8000/translate",
            json=demo_payload,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            task_id = result.get('task_id')
            
            print(f"   ‚úÖ Task ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {task_id}")
            print(f"   üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: http://localhost:8000/status/{task_id}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ task
            status_response = requests.get(f"http://localhost:8000/status/{task_id}")
            if status_response.status_code == 200:
                status_data = status_response.json()
                print(f"   üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {status_data.get('status', 'unknown')}")
                print(f"   üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: {status_data.get('progress', 0)}%")
            
        else:
            print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á task ‡πÑ‡∏î‡πâ: HTTP {response.status_code}")
            print(f"   Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô integration test: {e}")

def test_service_health():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á services ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("\nüè• ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û Services")
    print("=" * 40)
    
    services = [
        ("Backend API", "http://localhost:8000/health"),
        ("Whisper Service", "http://localhost:5001/health"), 
        ("TTS Service", "http://localhost:5002/health"),
        ("LibreTranslate", "http://localhost:5000/languages"),
        ("Frontend", "http://localhost:3000")
    ]
    
    healthy_services = []
    
    for name, url in services:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name}: ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ")
                healthy_services.append(name)
            else:
                print(f"‚ö†Ô∏è {name}: ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏õ‡∏Å‡∏ï‡∏¥ (HTTP {response.status_code})")
        except Exception as e:
            print(f"‚ùå {name}: ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - {e}")
    
    print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ: {len(healthy_services)}/{len(services)} services ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
    
    if len(healthy_services) == len(services):
        print("üéâ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    elif len(healthy_services) >= 3:
        print("‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô")
    else:
        print("‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö services")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Speech & TTS")
    print("üìÖ " + time.strftime("%Y-%m-%d %H:%M:%S"))
    print()
    
    print("üéØ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß:")
    print("   1. ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Whisper ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
    print("   2. ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö TTS ‡πÉ‡∏´‡πâ‡∏û‡∏π‡∏î‡∏ä‡πâ‡∏≤‡∏•‡∏á (rate=0.85, slow=True)")
    print("   3. ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° language parameter ‡πÉ‡∏ô pipeline")
    print("   4. ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á error handling ‡πÅ‡∏•‡∏∞ logging")
    print()
    
    # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    test_service_health()
    test_whisper_language_detection()
    test_tts_speed_improvement()
    test_full_pipeline_integration()
    
    print("\n" + "=" * 70)
    print("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("   üí° ‡∏´‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å test ‡∏ú‡πà‡∏≤‡∏ô = ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    print("   ‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô = ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    print("   ‚ùå ‡∏´‡∏≤‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß = ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö configuration")
    print()
    print("üîß ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á:")
    print("   1. ‡πÄ‡∏£‡∏¥‡πà‡∏° Docker services: docker compose up -d")
    print("   2. ‡∏£‡∏≠ services ‡∏û‡∏£‡πâ‡∏≠‡∏° (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏µ)")
    print("   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Frontend: http://localhost:3000")
    print("   4. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ test page: test-video-playback.html")

if __name__ == "__main__":
    main()
