#!/usr/bin/env python3
# test_real_translation.py - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏£‡∏¥‡∏á

import asyncio
import requests
import time
import json
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏Ç‡∏≠‡∏á backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_api_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API"""
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend
        response = requests.get("http://localhost:8000/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Backend API: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            health_data = response.json()
            print(f"   Services: {health_data.get('services', {})}")
        else:
            print(f"‚ùå Backend API: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend API: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ - {e}")
        return False
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LibreTranslate
        response = requests.get("http://localhost:5000/languages", timeout=15)
        if response.status_code == 200:
            print("‚úÖ LibreTranslate: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥")
            languages = response.json()
            print(f"   ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: {len(languages)} ‡∏†‡∏≤‡∏©‡∏≤")
        else:
            print(f"‚ùå LibreTranslate: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå LibreTranslate: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ - {e}")
    
    return True

def test_direct_translation():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    print("\nüî§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
        test_text = "Hello, how are you today?"
        
        payload = {
            "q": test_text,
            "source": "en",
            "target": "th"
        }
        
        response = requests.post(
            "http://localhost:5000/translate",
            json=payload,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            translated_text = result.get("translatedText", "")
            print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•: '{test_text}' ‚Üí '{translated_text}'")
            return True
        else:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False

def test_video_processing_pipeline():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"""
    print("\nüé¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
    
    # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_urls = [
        "https://www.youtube.com/watch?v=dQw4w9WgXcQ",  # Rick Roll (3:32)
        "https://youtu.be/jNQXAC9IVRw",  # Me at the zoo (19 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    ]
    
    for youtube_url in test_urls:
        print(f"\nüìπ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö URL: {youtube_url}")
        
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•
            payload = {
                "youtube_url": youtube_url,
                "target_language": "th"
            }
            
            print("   üì§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•...")
            response = requests.post(
                "http://localhost:8000/process-video/",
                json=payload,
                timeout=30
            )
            
            if response.status_code != 200:
                print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ: HTTP {response.status_code}")
                print(f"   Response: {response.text}")
                continue
            
            result = response.json()
            task_id = result.get("task_id")
            
            if not task_id:
                print("   ‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö task_id")
                continue
            
            print(f"   üìã Task ID: {task_id}")
            
            # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
            max_wait_time = 600  # ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ô‡∏≤‡∏ó‡∏µ
            start_time = time.time()
            
            while time.time() - start_time < max_wait_time:
                try:
                    status_response = requests.get(f"http://localhost:8000/status/{task_id}", timeout=10)
                    
                    if status_response.status_code != 200:
                        print(f"   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: HTTP {status_response.status_code}")
                        break
                    
                    status_data = status_response.json()
                    status = status_data.get("status", "unknown")
                    progress = status_data.get("progress", 0)
                    message = status_data.get("message", "")
                    
                    print(f"   üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status} ({progress}%) - {message}")
                    
                    if status == "completed":
                        print("   ‚úÖ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
                        
                        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                        print("   üì• ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î...")
                        download_response = requests.head(f"http://localhost:8000/download/{task_id}")
                        
                        if download_response.status_code == 200:
                            file_size = download_response.headers.get("Content-Length", "Unknown")
                            print(f"   ‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î (‡∏Ç‡∏ô‡∏≤‡∏î: {file_size} bytes)")
                        else:
                            print(f"   ‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°: HTTP {download_response.status_code}")
                        
                        return True
                        
                    elif status == "failed":
                        error = status_data.get("error", "Unknown error")
                        print(f"   ‚ùå ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {error}")
                        break
                        
                    elif status == "processing":
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
                        steps = status_data.get("steps", {})
                        for step_name, step_data in steps.items():
                            step_status = step_data.get("status", "pending")
                            step_progress = step_data.get("progress", 0)
                            if step_status != "pending":
                                print(f"      - {step_name}: {step_status} ({step_progress}%)")
                    
                    time.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                    
                except Exception as e:
                    print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {e}")
                    time.sleep(5)
            
            print(f"   ‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ ({max_wait_time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
            
        except Exception as e:
            print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á URL ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        break
    
    return False

def test_file_upload():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå"""
    print("\nüìÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏£‡∏¥‡∏á)
    test_file_path = "test_video.mp4"
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á
        with open(test_file_path, 'wb') as f:
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
            f.write(b'FAKE VIDEO DATA FOR TESTING' * 100)
        
        print(f"   üìÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_file_path}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
        with open(test_file_path, 'rb') as f:
            files = {'video': ('test_video.mp4', f, 'video/mp4')}
            response = requests.post("http://localhost:8000/upload", files=files, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            file_id = result.get("file_id")
            print(f"   ‚úÖ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - File ID: {file_id}")
            return True
        else:
            print(f"   ‚ùå ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: {e}")
        return False
    finally:
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        if os.path.exists(test_file_path):
            os.remove(test_file_path)

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö YouTube Video Translator")
    print("=" * 60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
    if not test_api_connection():
        print("\n‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if not test_direct_translation():
        print("\n‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
    test_file_upload()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    print("\nüéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠...")
    print("   ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô")
    
    test_video_processing_pipeline()
    
    print("\n" + "=" * 60)
    print("üèÅ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    main()
