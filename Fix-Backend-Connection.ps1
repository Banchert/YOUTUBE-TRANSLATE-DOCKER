# PowerShell script to diagnose and fix Docker/Backend connection issues
# File: Fix-Backend-Connection.ps1

Write-Host ""
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "   YouTube Video Translator - Backend Fix   " -ForegroundColor Cyan  
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host ""

# Function to test if a command exists
function Test-Command($cmdname) {
    return [bool](Get-Command -Name $cmdname -ErrorAction SilentlyContinue)
}

# Function to test if a port is open
function Test-Port($hostname, $port) {
    try {
        $connection = New-Object System.Net.Sockets.TcpClient($hostname, $port)
        $connection.Close()
        return $true
    }
    catch {
        return $false
    }
}

# 1. Check Docker Installation
Write-Host "[1/7] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker..." -ForegroundColor Yellow

if (Test-Command docker) {
    Write-Host "‚úÖ Docker ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß" -ForegroundColor Green
    
    # Check Docker service status
    try {
        $dockerVersion = docker version --format "{{.Server.Version}}" 2>$null
        if ($dockerVersion) {
            Write-Host "‚úÖ Docker Engine ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $dockerVersion" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Docker Engine ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" -ForegroundColor Red
            Write-Host "üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Docker Desktop" -ForegroundColor Cyan
            Write-Host "   ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° Docker service: net start docker" -ForegroundColor Cyan
        }
    }
    catch {
        Write-Host "‚ùå Docker ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ" -ForegroundColor Red
        Write-Host "üí° ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: Get-Service docker | Start-Service" -ForegroundColor Cyan
    }
} else {
    Write-Host "‚ùå Docker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á" -ForegroundColor Red
    Write-Host "üí° ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å: https://www.docker.com/products/docker-desktop" -ForegroundColor Cyan
}

# 2. Check Docker Compose
Write-Host ""
Write-Host "[2/7] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker Compose..." -ForegroundColor Yellow

if (Test-Command "docker") {
    try {
        $composeVersion = docker compose version 2>$null
        if ($composeVersion) {
            Write-Host "‚úÖ Docker Compose ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" -ForegroundColor Green
            Write-Host "   $composeVersion" -ForegroundColor Gray
        } else {
            # Try legacy docker-compose
            $legacyCompose = docker-compose --version 2>$null
            if ($legacyCompose) {
                Write-Host "‚úÖ Docker Compose (legacy) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" -ForegroundColor Green
                Write-Host "   $legacyCompose" -ForegroundColor Gray
            } else {
                Write-Host "‚ùå Docker Compose ‡πÑ‡∏°‡πà‡∏û‡∏ö" -ForegroundColor Red
            }
        }
    }
    catch {
        Write-Host "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker Compose ‡πÑ‡∏î‡πâ" -ForegroundColor Red
    }
}

# 3. Check current containers
Write-Host ""
Write-Host "[3/7] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Containers ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà..." -ForegroundColor Yellow

try {
    $containers = docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>$null
    if ($containers) {
        Write-Host "üì¶ Containers ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:" -ForegroundColor Green
        $containers | ForEach-Object { Write-Host "   $_" -ForegroundColor Gray }
    } else {
        Write-Host "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Container ‡πÉ‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Containers ‡πÑ‡∏î‡πâ" -ForegroundColor Red
}

# 4. Check ports
Write-Host ""
Write-Host "[4/7] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Ports..." -ForegroundColor Yellow

$ports = @{
    "Backend API" = 8000
    "Frontend" = 3000  
    "LibreTranslate" = 5000
    "Redis" = 6379
    "PostgreSQL" = 5432
}

foreach ($service in $ports.GetEnumerator()) {
    $isOpen = Test-Port "localhost" $service.Value
    if ($isOpen) {
        Write-Host "‚úÖ $($service.Key): localhost:$($service.Value) - ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $($service.Key): localhost:$($service.Value) - ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà" -ForegroundColor Red
    }
}

# 5. Test Backend API specifically
Write-Host ""
Write-Host "[5/7] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend API..." -ForegroundColor Yellow

try {
    $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Backend API ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á: $($response | ConvertTo-Json -Compress)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Backend API ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á: $($_.Exception.Message)" -ForegroundColor Red
}

# 6. Try to start services
Write-Host ""
Write-Host "[6/7] ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£..." -ForegroundColor Yellow

$dockerPath = "d:\YOUTUBE-TRANSLATE\docker"
if (Test-Path $dockerPath) {
    Write-Host "üìÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡πÑ‡∏õ: $dockerPath" -ForegroundColor Gray
    Set-Location $dockerPath
    
    try {
        Write-Host "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Docker Services..." -ForegroundColor Cyan
        docker compose -f docker-compose-simple.yml up -d 2>&1
        
        Write-Host "‚è≥ ‡∏£‡∏≠ 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..." -ForegroundColor Yellow
        Start-Sleep -Seconds 20
        
        # Test again
        Write-Host "üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backend ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á..." -ForegroundColor Cyan
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:8000/health" -Method GET -TimeoutSec 10
            Write-Host "‚úÖ Backend ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è  Backend ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°, ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå docker: $dockerPath" -ForegroundColor Red
}

# 7. Final recommendations
Write-Host ""
Write-Host "[7/7] ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥..." -ForegroundColor Yellow

Write-Host ""
Write-Host "üîß ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ:" -ForegroundColor Cyan
Write-Host "   1. ‡πÄ‡∏õ‡∏¥‡∏î Docker Desktop" -ForegroundColor White
Write-Host "   2. ‡∏£‡∏≠‡πÉ‡∏´‡πâ Docker ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏î‡∏π‡∏ó‡∏µ‡πà System Tray)" -ForegroundColor White  
Write-Host "   3. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: docker ps" -ForegroundColor White
Write-Host "   4. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: docker compose -f docker-compose-simple.yml up -d" -ForegroundColor White
Write-Host "   5. ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡∏™: http://localhost:8000/health" -ForegroundColor White

Write-Host ""
Write-Host "üì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Manual:" -ForegroundColor Cyan  
Write-Host "   ‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ: http://localhost:8000/docs" -ForegroundColor White
Write-Host "   ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö health endpoint: http://localhost:8000/health" -ForegroundColor White
Write-Host "   ‚Ä¢ ‡∏î‡∏π logs: docker compose logs backend" -ForegroundColor White

Write-Host ""
Write-Host "üé¨ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Backend ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå: d:\YOUTUBE-TRANSLATE\test-video-playback.html" -ForegroundColor White
Write-Host "   ‚Ä¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Frontend: http://localhost:3000" -ForegroundColor White

Write-Host ""
Write-Host "‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å..."
Read-Host
